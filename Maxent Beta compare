
# Species Distribution Modeling with package "sdm"
# required
library(dismo)
options(java.parameters = "-Xmx7g" ) # set memory
#==============
# only run if the maxent.jar file is available, in the right folder
#jar <- paste(system.file(package="dismo"), "/java/maxent.jar", sep='')
############
options(java.parameters = "-Xmx5g" ) # set memory
#==============
#### setting working directory
setwd("w:/MaxEnt Beta compare")


#=========================================
# Rhododendron files
presence.df<- read.csv("Rhododendron 17 species.csv")
pseuabs.df<- read.csv("Random_pseudoabsence_elev_1000_to_5500.csv")
lattice.df<- read.csv("Nepal_lattice3km_current.csv")
berb.df<- read.csv("Berberis 13_spp.csv")

names(presence.df)
names(pseuabs.df)
names(lattice.df)
names(berb.df)

pseuabs.df<- pseuabs.df[,c(1:3, 5:23)]
lattice.df<- lattice.df[,c(1:22)]

# These data set lacks Presence/Absence column, i.e. 1/0 
# Add with 1/0 column
presence.df$PA<-1 ; head(presence.df)
pseuabs.df$PA <-0 ; head(pseuabs.df)
berb.df$PA<-1; head(berb.df)
dim(presence.df)

# Check species wise records
data.frame(table(presence.df$species))
data.frame(table(berb.df$species))
# check the levels based on numbers, there are 10 spcies
levels(presence.df$species)[16]
levels(berb.df$species)[13]

# Combind both Rhododendron & Berberis species presence file
presence.df<- rbind(presence.df, berb.df)
data.frame(table(presence.df$species))

write.csv(data.frame(table(presence.df$species)), file = "Species name and Occurrence count.csv")
# Combine Presence and pseudoabsence
##### Change presence file name here
for (i in 1:29){ 
  # Prepare data
  spp<- levels(presence.df$species)[i] # extract species name
  Pres.df<- presence.df[presence.df$species==spp,] # select rows based on species name
  abs.df<- pseuabs.df
  PA.df<- rbind(Pres.df, abs.df)
  print(table(PA.df$PA))
  # Now Presence/Absence data is ready, called "PA.df"
  # split Predictors and response variables
  P<- PA.df[,4:22]  # Predictos, bio01 to bio19
  O<- PA.df[, 23]    # Occurence, presence/ pseudoabsence
  
  dim(P)
  # prepare Lattic lat/long
  latt.df1 <- lattice.df [, c(4:22)] # Lattice with variables
  lat.long<- lattice.df [, c(3,2)]   # lattice Lat.Long
  
  # Creat data frames to store results
  m.out<-data.frame()
  
  # Set up model loop at different Beta values, 0.1 interval, 0.5 inveral and 1.0 interval

# ===============
# Part I
    for(J in seq(from=0,to=2,by=0.1)){
    J.m<- maxent(P, O, args=c(paste0('betamultiplier=',J), "replicatetype=Subsample", 
                             'randomtestpoints=30', # Test percentage when subsampling is set
                             "replicates=10", "randomseed=true")) 
    m.out[nrow(m.out)+1, 1]<- J
    # Extract model results
    J.res <- J.m@results
    m.out[nrow(m.out), 2]<-J.res["Entropy",]["species (average)"] # Extract Average Entropy of all replications. 
    m.out[nrow(m.out), 3]<-J.res["Training.AUC",]["species (average)"] # Space inside Quote is resuls error.
    m.out[nrow(m.out), 4]<-J.res["Test.AUC",]["species (average)"]
    
    
    # Prediction from each model of K-fold
    pre.d <- lat.long# lattice Lat.Long
          for(r in 1:10){
               J.m@models[[r]]-> m.1 # Extract single model from stake of K-fold replications
               pre.d[,ncol(pre.d)+1]<- predict(m.1, latt.df1)
              }
    # Store the Average of each predictions
    lat.long$Avg<-rowMeans(pre.d[, 3:ncol(pre.d)]) # take average of all predictions
    # Predict from each Beta and store as new colum
    names(lat.long)[ncol(lat.long)]<- paste0("Beta_", J) # rename the column
    
        # Predict in True Presence and pseudoabsence 
        TP<-data.frame()
        TA<- data.frame()
        for (i in 1:10){
                TP[1:nrow (Pres.df),i] <- predict(J.m@models[[i]], Pres.df,  args=c("outputformat=raw"))
                TA[1:nrow (abs.df),i] <- predict(J.m@models[[i]], abs.df,  args=c("outputformat=raw"))
               }
        # Take average of 10 replications
        testP<- rowMeans(TP[, 1:10])
        testA<- rowMeans(TA[, 1:10])
    
    # Evaluate for ROC plot
    Eva.J<- evaluate(p=testP, a=testA)
    # Store more results
    m.out[nrow(m.out), 5]<- Eva.J@auc
    m.out[nrow(m.out), 6]<- Eva.J@cor
    m.out[nrow(m.out), 7]<- threshold(Eva.J)[[1]] # Kappa
    m.out[nrow(m.out), 8]<- threshold(Eva.J)[[5]] # "Equal.sens.specificity"
    m.out[nrow(m.out), 9]<- threshold(Eva.J)[[6]] # "Sensitivity"
    }
#====================
# Part II
  for(K in seq(from=2.5,to=5,by=0.5)){
    K.m<- maxent(P, O, args=c(paste0('betamultiplier=',K), "replicatetype=Subsample", 
                              'randomtestpoints=30', # Test percentage when subsampling is set
                              "replicates=10", "randomseed=true")) 
    m.out[nrow(m.out)+1, 1]<- K
    # Extract model results
    K.res <- K.m@results
    m.out[nrow(m.out), 2]<-K.res["Entropy",]["species (average)"] # Extract Average Entropy of all replications. 
    m.out[nrow(m.out), 3]<-K.res["Training.AUC",]["species (average)"] # Space inside Quote is resuls error.
    m.out[nrow(m.out), 4]<-K.res["Test.AUC",]["species (average)"]
    
    
    # Prediction from each model of K-fold
    pre.d <- lat.long# lattice Lat.Long
    for(r in 1:10){
      K.m@models[[r]]-> m.2 # Extract single model from stake of K-fold replications
      pre.d[,ncol(pre.d)+1]<- predict(m.2, latt.df1)
    }
    # Store the Average of each predictions
    lat.long$Avg<-rowMeans(pre.d[, 3:ncol(pre.d)]) # take average of all predictions
    # Predict from each Beta and store as new colum
    names(lat.long)[ncol(lat.long)]<- paste0("Beta_", K) # rename the column
    
    # Predict in True Presence and pseudoabsence 
    TP<-data.frame()
    TA<- data.frame()
    for (i in 1:10){
      TP[1:nrow (Pres.df),i] <- predict(K.m@models[[i]], Pres.df,  args=c("outputformat=raw"))
      TA[1:nrow (abs.df),i]  <- predict(K.m@models[[i]], abs.df,  args=c("outputformat=raw"))
    }
    # Take average of 10 replications
    testP<- rowMeans(TP[, 1:10])
    testA<- rowMeans(TA[, 1:10])
    
    # Evaluate for ROC plot
    Eva.K<- evaluate(p=testP, a=testA)
    # Store more results
    m.out[nrow(m.out), 5]<- Eva.K@auc
    m.out[nrow(m.out), 6]<- Eva.K@cor
    m.out[nrow(m.out), 7]<- threshold(Eva.K)[[1]] # Kappa
    m.out[nrow(m.out), 8]<- threshold(Eva.K)[[5]] # "Equal.sens.specificity"
    m.out[nrow(m.out), 9]<- threshold(Eva.K)[[6]] # "Sensitivity"
    
  }
# =============
# Part III
  
  for(M in seq(from=6,to=20,by=1.0)){
    M.m<- maxent(P, O, args=c(paste0('betamultiplier=',M), "replicatetype=Subsample", 
                              'randomtestpoints=30', # Test percentage when subsampling is set
                              "replicates=10", "randomseed=true")) 
    m.out[nrow(m.out)+1, 1]<- M
    # Extract model results
    M.res <- M.m@results
    m.out[nrow(m.out), 2]<-M.res["Entropy",]["species (average)"] # Extract Average Entropy of all replications. 
    m.out[nrow(m.out), 3]<-M.res["Training.AUC",]["species (average)"] # Space inside Quote is resuls error.
    m.out[nrow(m.out), 4]<-M.res["Test.AUC",]["species (average)"]
    
    
    # Prediction from each model of K-fold
    pre.d <- lat.long# lattice Lat.Long
    for(r in 1:10){
      M.m@models[[r]]-> m.3 # Extract single model from stake of K-fold replications
      pre.d[,ncol(pre.d)+1]<- predict(m.3, latt.df1)
    }
    # Store the Average of each predictions
    lat.long$Avg<-rowMeans(pre.d[, 3:ncol(pre.d)]) # take average of all predictions
    # Predict from each Beta and store as new colum
    names(lat.long)[ncol(lat.long)]<- paste0("Beta_", M) # rename the column
    
    # Predict in True Presence and pseudoabsence 
    TP<-data.frame()
    TA<- data.frame()
    for (i in 1:10){
      TP[1:nrow (Pres.df),i] <- predict(M.m@models[[i]], Pres.df,  args=c("outputformat=raw"))
      TA[1:nrow (abs.df),i] <- predict(M.m@models[[i]], abs.df,  args=c("outputformat=raw"))
    }
    # Take average of 10 replications
    testP<- rowMeans(TP[, 1:10])
    testA<- rowMeans(TA[, 1:10])
    
    # Evaluate for ROC plot
    Eva.M<- evaluate(p=testP, a=testA)
    # Store more results
    m.out[nrow(m.out), 5]<- Eva.M@auc
    m.out[nrow(m.out), 6]<- Eva.M@cor
    m.out[nrow(m.out), 7]<- threshold(Eva.M)[[1]] # Kappa
    m.out[nrow(m.out), 8]<- threshold(Eva.M)[[5]] # "Equal.sens.specificity"
    m.out[nrow(m.out), 9]<- threshold(Eva.M)[[6]] # "Sensitivity"
  }
# ========
# End of Part I, II and EE
# Export summary result and predicted files for each specis. 
  # Rename before export
  colnames(m.out)<- c("Beta", "Entropy", "Training.AUC", "Test.AUC",  "AUC", 
                         "COR", "Kappa", "Equal.sens.specificity", "Sensitivity")
  write.csv(m.out, paste('Rhododendron 17 spp/Model Summary Result_', spp, 'csv', sep = '.'))
  lat.long$Average_all_BETA<- rowMeans(lat.long[3:ncol(lat.long)])
  write.csv(lat.long, paste('Rhododendron 17 spp/Model Prediction all Beta Result_', spp, 'csv', sep = '.'))
  }
  
# END here
  
